side,file_path,has_no_body,extern_c,source,line_count,line_range
C,E:\rust_projects\c\cr-sqlite\core\src\changes-vtab.c,True,False,"rc = crsql_ensure_table_infos_are_up_to_date(db, pNew->pExtData,
                                               &(*ppVtab)->zErrMsg);",2,"(46, 47)"
C,E:\rust_projects\c\cr-sqlite\core\src\rust.h,True,False,"int crsql_ensure_table_infos_are_up_to_date(sqlite3 *db,
                                            crsql_ExtData *pExtData,
                                            char **err);",3,"(21, 23)"
Rust,E:\rust_projects\c\cr-sqlite\core\rs\core\src\tableinfo.rs,False,True,"pub extern ""C"" fn crsql_ensure_table_infos_are_up_to_date(
    db: *mut sqlite::sqlite3,
    ext_data: *mut crsql_ExtData,
    err: *mut *mut c_char,
) -> c_int {
    let already_updated = unsafe { (*ext_data).updatedTableInfosThisTx == 1 };
    if already_updated {
        return ResultCode::OK as c_int;
    }

    let schema_changed =
        unsafe { crsql_fetchPragmaSchemaVersion(db, ext_data, TABLE_INFO_SCHEMA_VERSION) };

    if schema_changed < 0 {
        return ResultCode::ERROR as c_int;
    }

    let mut table_infos = unsafe { Box::from_raw((*ext_data).tableInfos as *mut Vec<TableInfo>) };

    if schema_changed > 0 || table_infos.len() == 0 {
        match pull_all_table_infos(db, ext_data, err) {
            Ok(new_table_infos) => {
                *table_infos = new_table_infos;
                forget(table_infos);
                unsafe {
                    (*ext_data).updatedTableInfosThisTx = 1;
                }
                return ResultCode::OK as c_int;
            }
            Err(e) => {
                forget(table_infos);
                return e as c_int;
            }
        }
    }

    forget(table_infos);
    unsafe {
        (*ext_data).updatedTableInfosThisTx = 1;
    }
    return ResultCode::OK as c_int;
}",37,"(748, 789)"
