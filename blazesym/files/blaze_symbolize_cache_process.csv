side,file_path,has_no_body,extern_c,source,line_count,line_range
C,E:\rust_projects\c\blazesym\capi\include\blazesym.h,True,True,"void blaze_symbolize_cache_process(blaze_symbolizer *symbolizer,
                                   const struct blaze_cache_src_process *cache);",2,"(1349, 1350)"
Rust,E:\rust_projects\c\blazesym\capi\src\symbolize.rs,False,True,"pub unsafe extern ""C"" fn blaze_symbolize_cache_process(
    symbolizer: *mut blaze_symbolizer,
    cache: *const blaze_cache_src_process,
) {
    if !input_zeroed!(cache, blaze_cache_src_process) {
        let () = set_last_err(blaze_err::INVALID_INPUT);
        return
    }
    let cache = input_sanitize!(cache, blaze_cache_src_process);
    let cache = cache::Cache::from(cache::Process::from(cache));

    // SAFETY: The caller ensures that the pointer is valid.
    let symbolizer = unsafe { &*symbolizer };
    let result = symbolizer.cache(&cache);
    let err = result
        .map(|()| blaze_err::OK)
        .unwrap_or_else(|err| err.kind().into());
    let () = set_last_err(err);
}",17,"(866, 884)"
